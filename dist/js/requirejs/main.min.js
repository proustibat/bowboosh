/**
 * bowboosh - Simple boilerplate with gulp, bower, bootstrap sass, font-awesome, bootswatch themes
 * @version v1.0.0
 * @link https://github.com/proustibat/bowboosh
 * @license MIT
 */
'use strict';
// Require.js allows us to configure shortcut alias
require.config( {
        baseUrl: 'js/vendor',
        paths: {
            jquery: 'jquery/dist/jquery.min',
            bootstrap: "bootstrap-sass/assets/javascripts/bootstrap.min"
        },
        shim: {
            'bootstrap': {
                deps: [ 'jquery' ]
            }
        }
    }
);

require( [
        'jquery',
        'bootstrap',
        'app/clickmemodule'
    ], function ( $, Bootstrap, ClickMeModule ) {

        // DOM ready
        $( function () {
                console.log( 'Hello Require JS App' );

                var colors = [
                    'color-fav-green-blue',
                    'color-fav-yellow',
                    'color-fav-pink',
                    'color-fav-red-orange',
                    'color-fav-green',
                    'color-fav-turquoise',
                    'color-fav-blue',
                    'color-fav-orange',
                    'color-fav-violet'
                ];
            
                // Instanciation & initialization each module
                for ( var i = 0,
                          usedColor = 0,
                          nbModules = $( '.js-modules .js-module' ).length,
                          moduleList = [];
                      i < nbModules;
                      i++ ) {
                    moduleList.push( new ClickMeModule( $( '.js-modules .js-module' ).eq( i ), colors[ usedColor ] ) );
                    usedColor = usedColor === colors.length - 1 ? 0 : usedColor + 1;
                    moduleList.pop().init();

                }
            }
        );
    }
);
'use strict';
define( 'app/clickmemodule', [
        'jquery',
        'app/helpers'
    ], function ( $, Helpers ) {

        return function ( $element, cssClass ) {
            console.log( 'Hello ClickMeModule' );

            return {

                uid: null,
                $el: null,
                $box: null,
                $button: null,

                init: function () {
                    console.log( 'ClickMeModule.init' );
                    this.uid = Helpers.guid();
                    this.$el = $element;
                    this.$box = this.$el.find( '.mod-rjs-box' );
                    this.$box.addClass( cssClass );
                    this.$el.data( 'uid', this.uid );
                    this.$el.find( '.js-module-title' ).html( 'Module ' + this.uid );
                    this.$button = this.$el.find( '.js-button' );
                    this.setListeners();
                },

                setListeners: function () {
                    console.log( 'ClickMeModule.setListeners' );
                    this.$button.on( 'click', this.onButtonClick.bind( this ) );
                },

                onButtonClick: function ( e ) {
                    console.log( 'ClickMeModule.onButtonClick : ', this.uid );
                    this.$button.button( 'loading' );
                    setTimeout( function () {
                            this.$el.toggleClass( 'active' );
                            var state = (this.$button.attr( "aria-pressed" ) === 'true' ? 'unclick' : 'click');
                            console.log( this.$button.attr( "aria-pressed" ) );
                            console.log( state );
                            // debugger;
                            this.$button.button( state );
                            // this.$button.button( 'reset' );

                        }.bind( this ), Helpers.getRandomInt( 0, 1500 )
                    );
                    e.preventDefault();
                }
            };

        };

    }
);
'use strict';
define( 'app/helpers', [
        'jquery'
    ], function ( $ ) {

        return {

            guid: function () {
                return Math.floor( (1 + Math.random()) * 0x10000 )
                    .toString( 16 )
                    .substring( 1 );
            },

            /**
             * Return a random value between a min value inclusive and a max value exclusive
             * @param min
             * @param max
             * @returns {*}
             */
            getRandomInt: function ( min, max ) {
                min = Math.ceil( min );
                max = Math.floor( max );
                return Math.floor( Math.random() * (max - min) ) + min;
            }
        };
    }
);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJhcHAvY2xpY2ttZW1vZHVsZS5qcyIsImFwcC9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBSZXF1aXJlLmpzIGFsbG93cyB1cyB0byBjb25maWd1cmUgc2hvcnRjdXQgYWxpYXNcbnJlcXVpcmUuY29uZmlnKCB7XG4gICAgICAgIGJhc2VVcmw6ICdqcy92ZW5kb3InLFxuICAgICAgICBwYXRoczoge1xuICAgICAgICAgICAganF1ZXJ5OiAnanF1ZXJ5L2Rpc3QvanF1ZXJ5Lm1pbicsXG4gICAgICAgICAgICBib290c3RyYXA6IFwiYm9vdHN0cmFwLXNhc3MvYXNzZXRzL2phdmFzY3JpcHRzL2Jvb3RzdHJhcC5taW5cIlxuICAgICAgICB9LFxuICAgICAgICBzaGltOiB7XG4gICAgICAgICAgICAnYm9vdHN0cmFwJzoge1xuICAgICAgICAgICAgICAgIGRlcHM6IFsgJ2pxdWVyeScgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuKTtcblxucmVxdWlyZSggW1xuICAgICAgICAnanF1ZXJ5JyxcbiAgICAgICAgJ2Jvb3RzdHJhcCcsXG4gICAgICAgICdhcHAvY2xpY2ttZW1vZHVsZSdcbiAgICBdLCBmdW5jdGlvbiAoICQsIEJvb3RzdHJhcCwgQ2xpY2tNZU1vZHVsZSApIHtcblxuICAgICAgICAvLyBET00gcmVhZHlcbiAgICAgICAgJCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnSGVsbG8gUmVxdWlyZSBKUyBBcHAnICk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY29sb3JzID0gW1xuICAgICAgICAgICAgICAgICAgICAnY29sb3ItZmF2LWdyZWVuLWJsdWUnLFxuICAgICAgICAgICAgICAgICAgICAnY29sb3ItZmF2LXllbGxvdycsXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYtcGluaycsXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYtcmVkLW9yYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYtZ3JlZW4nLFxuICAgICAgICAgICAgICAgICAgICAnY29sb3ItZmF2LXR1cnF1b2lzZScsXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYtYmx1ZScsXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYtb3JhbmdlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yLWZhdi12aW9sZXQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEluc3RhbmNpYXRpb24gJiBpbml0aWFsaXphdGlvbiBlYWNoIG1vZHVsZVxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZENvbG9yID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmJNb2R1bGVzID0gJCggJy5qcy1tb2R1bGVzIC5qcy1tb2R1bGUnICkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGVMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgaSA8IG5iTW9kdWxlcztcbiAgICAgICAgICAgICAgICAgICAgICBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUxpc3QucHVzaCggbmV3IENsaWNrTWVNb2R1bGUoICQoICcuanMtbW9kdWxlcyAuanMtbW9kdWxlJyApLmVxKCBpICksIGNvbG9yc1sgdXNlZENvbG9yIF0gKSApO1xuICAgICAgICAgICAgICAgICAgICB1c2VkQ29sb3IgPSB1c2VkQ29sb3IgPT09IGNvbG9ycy5sZW5ndGggLSAxID8gMCA6IHVzZWRDb2xvciArIDE7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUxpc3QucG9wKCkuaW5pdCgpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cbik7IiwiJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKCAnYXBwL2NsaWNrbWVtb2R1bGUnLCBbXG4gICAgICAgICdqcXVlcnknLFxuICAgICAgICAnYXBwL2hlbHBlcnMnXG4gICAgXSwgZnVuY3Rpb24gKCAkLCBIZWxwZXJzICkge1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoICRlbGVtZW50LCBjc3NDbGFzcyApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnSGVsbG8gQ2xpY2tNZU1vZHVsZScgKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICAgICAgICAgIHVpZDogbnVsbCxcbiAgICAgICAgICAgICAgICAkZWw6IG51bGwsXG4gICAgICAgICAgICAgICAgJGJveDogbnVsbCxcbiAgICAgICAgICAgICAgICAkYnV0dG9uOiBudWxsLFxuXG4gICAgICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ0NsaWNrTWVNb2R1bGUuaW5pdCcgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aWQgPSBIZWxwZXJzLmd1aWQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwgPSAkZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kYm94ID0gdGhpcy4kZWwuZmluZCggJy5tb2QtcmpzLWJveCcgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kYm94LmFkZENsYXNzKCBjc3NDbGFzcyApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5kYXRhKCAndWlkJywgdGhpcy51aWQgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCggJy5qcy1tb2R1bGUtdGl0bGUnICkuaHRtbCggJ01vZHVsZSAnICsgdGhpcy51aWQgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kYnV0dG9uID0gdGhpcy4kZWwuZmluZCggJy5qcy1idXR0b24nICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ0NsaWNrTWVNb2R1bGUuc2V0TGlzdGVuZXJzJyApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRidXR0b24ub24oICdjbGljaycsIHRoaXMub25CdXR0b25DbGljay5iaW5kKCB0aGlzICkgKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgb25CdXR0b25DbGljazogZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ0NsaWNrTWVNb2R1bGUub25CdXR0b25DbGljayA6ICcsIHRoaXMudWlkICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGJ1dHRvbi5idXR0b24oICdsb2FkaW5nJyApO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwudG9nZ2xlQ2xhc3MoICdhY3RpdmUnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gKHRoaXMuJGJ1dHRvbi5hdHRyKCBcImFyaWEtcHJlc3NlZFwiICkgPT09ICd0cnVlJyA/ICd1bmNsaWNrJyA6ICdjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCB0aGlzLiRidXR0b24uYXR0ciggXCJhcmlhLXByZXNzZWRcIiApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIHN0YXRlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kYnV0dG9uLmJ1dHRvbiggc3RhdGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLiRidXR0b24uYnV0dG9uKCAncmVzZXQnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCggdGhpcyApLCBIZWxwZXJzLmdldFJhbmRvbUludCggMCwgMTUwMCApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH07XG5cbiAgICB9XG4pOyIsIid1c2Ugc3RyaWN0JztcbmRlZmluZSggJ2FwcC9oZWxwZXJzJywgW1xuICAgICAgICAnanF1ZXJ5J1xuICAgIF0sIGZ1bmN0aW9uICggJCApIHtcblxuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgICBndWlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoICgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwIClcbiAgICAgICAgICAgICAgICAgICAgLnRvU3RyaW5nKCAxNiApXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoIDEgKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJuIGEgcmFuZG9tIHZhbHVlIGJldHdlZW4gYSBtaW4gdmFsdWUgaW5jbHVzaXZlIGFuZCBhIG1heCB2YWx1ZSBleGNsdXNpdmVcbiAgICAgICAgICAgICAqIEBwYXJhbSBtaW5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtYXhcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRSYW5kb21JbnQ6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKCBtaW4gKTtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKCBtYXggKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICkgKyBtaW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
