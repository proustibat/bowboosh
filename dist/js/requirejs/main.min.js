/**
 * bowboosh - Simple boilerplate with gulp, bower, bootstrap sass, font-awesome, bootswatch themes
 * @version v1.0.0
 * @link https://github.com/proustibat/bowboosh
 * @license MIT
 */
'use strict';
// Require.js allows us to configure shortcut alias
require.config( {
        baseUrl: 'js/vendor',
        paths: {
            jquery: 'jquery/dist/jquery.min',
            bootstrap: "bootstrap-sass/assets/javascripts/bootstrap.min"
        },
        shim: {
            'bootstrap': {
                deps: [ 'jquery' ]
            }
        }
    }
);

require( [
        'jquery',
        'bootstrap',
        'app/clickmemodule'
    ], function ( $, Bootstrap, ClickMeModule ) {

        // DOM ready
        $( function () {
                console.log( 'Hello Require JS App' );

                var colors = [
                    'color-fav-green-blue',
                    'color-fav-yellow',
                    'color-fav-pink',
                    'color-fav-red-orange',
                    'color-fav-green',
                    'color-fav-turquoise',
                    'color-fav-blue',
                    'color-fav-orange',
                    'color-fav-violet'
                ];
                var usedColor = 0;

                var nbModules = $( '.js-modules .js-module' ).length;
                var moduleList = [];
                // Instanciation
                for ( var i = 0, l = nbModules; i < l; i++ ) {
                    moduleList.push( new ClickMeModule( $( '.js-modules .js-module' ).eq( i ), colors[ usedColor ] ) );
                    usedColor++;
                    if ( usedColor === colors.length ) {
                        usedColor = 0;
                    }
                }
                // Initilization
                for ( i = 0; i < l; i++ ) {
                    moduleList[ i ].init();
                }

            }
        );
    }
);
'use strict';
define( 'app/clickmemodule', [
        'jquery',
        'app/helpers'
    ], function ( $, Helpers ) {

        return function ( $element, cssClass ) {
            console.log( 'Hello ClickMeModule' );

            return {

                uid: null,
                $el: null,
                $box: null,
                $button: null,

                init: function () {
                    console.log( 'ClickMeModule.init' );
                    this.uid = Helpers.guid();
                    this.$el = $element;
                    this.$box = this.$el.find( '.mod-rjs-box' );
                    this.$box.addClass( cssClass );
                    this.$el.data( 'uid', this.uid );
                    this.$el.find( '.js-module-title' ).html( 'Module ' + this.uid );
                    this.$button = this.$el.find( '.js-button' );
                    this.setListeners();
                },

                setListeners: function () {
                    console.log( 'ClickMeModule.setListeners' );
                    this.$button.on( 'click', this.onButtonClick.bind( this ) );
                },

                onButtonClick: function ( e ) {
                    console.log( 'ClickMeModule.onButtonClick : ', this.uid );
                    this.$button.button( 'loading' );
                    setTimeout( function () {
                            this.$el.toggleClass( 'active' );
                            var state = (this.$button.attr( "aria-pressed" ) === 'true' ? 'unclick' : 'click');
                            console.log( this.$button.attr( "aria-pressed" ) );
                            console.log( state );
                            // debugger;
                            this.$button.button( state );
                            // this.$button.button( 'reset' );

                        }.bind( this ), Helpers.getRandomInt( 0, 1500 )
                    );
                    e.preventDefault();
                }
            };

        };

    }
);
'use strict';
define( 'app/helpers', [
        'jquery'
    ], function ( $ ) {

        return {

            guid: function () {
                return Math.floor( (1 + Math.random()) * 0x10000 )
                    .toString( 16 )
                    .substring( 1 );
            },

            /**
             * Return a random value between a min value inclusive and a max value exclusive
             * @param min
             * @param max
             * @returns {*}
             */
            getRandomInt: function ( min, max ) {
                min = Math.ceil( min );
                max = Math.floor( max );
                return Math.floor( Math.random() * (max - min) ) + min;
            }
        };
    }
);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJhcHAvY2xpY2ttZW1vZHVsZS5qcyIsImFwcC9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIFJlcXVpcmUuanMgYWxsb3dzIHVzIHRvIGNvbmZpZ3VyZSBzaG9ydGN1dCBhbGlhc1xucmVxdWlyZS5jb25maWcoIHtcbiAgICAgICAgYmFzZVVybDogJ2pzL3ZlbmRvcicsXG4gICAgICAgIHBhdGhzOiB7XG4gICAgICAgICAgICBqcXVlcnk6ICdqcXVlcnkvZGlzdC9qcXVlcnkubWluJyxcbiAgICAgICAgICAgIGJvb3RzdHJhcDogXCJib290c3RyYXAtc2Fzcy9hc3NldHMvamF2YXNjcmlwdHMvYm9vdHN0cmFwLm1pblwiXG4gICAgICAgIH0sXG4gICAgICAgIHNoaW06IHtcbiAgICAgICAgICAgICdib290c3RyYXAnOiB7XG4gICAgICAgICAgICAgICAgZGVwczogWyAnanF1ZXJ5JyBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5yZXF1aXJlKCBbXG4gICAgICAgICdqcXVlcnknLFxuICAgICAgICAnYm9vdHN0cmFwJyxcbiAgICAgICAgJ2FwcC9jbGlja21lbW9kdWxlJ1xuICAgIF0sIGZ1bmN0aW9uICggJCwgQm9vdHN0cmFwLCBDbGlja01lTW9kdWxlICkge1xuXG4gICAgICAgIC8vIERPTSByZWFkeVxuICAgICAgICAkKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdIZWxsbyBSZXF1aXJlIEpTIEFwcCcgKTtcblxuICAgICAgICAgICAgICAgIHZhciBjb2xvcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYtZ3JlZW4tYmx1ZScsXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYteWVsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yLWZhdi1waW5rJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yLWZhdi1yZWQtb3JhbmdlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yLWZhdi1ncmVlbicsXG4gICAgICAgICAgICAgICAgICAgICdjb2xvci1mYXYtdHVycXVvaXNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yLWZhdi1ibHVlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yLWZhdi1vcmFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAnY29sb3ItZmF2LXZpb2xldCdcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHZhciB1c2VkQ29sb3IgPSAwO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5iTW9kdWxlcyA9ICQoICcuanMtbW9kdWxlcyAuanMtbW9kdWxlJyApLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgbW9kdWxlTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIEluc3RhbmNpYXRpb25cbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBuYk1vZHVsZXM7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUxpc3QucHVzaCggbmV3IENsaWNrTWVNb2R1bGUoICQoICcuanMtbW9kdWxlcyAuanMtbW9kdWxlJyApLmVxKCBpICksIGNvbG9yc1sgdXNlZENvbG9yIF0gKSApO1xuICAgICAgICAgICAgICAgICAgICB1c2VkQ29sb3IrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB1c2VkQ29sb3IgPT09IGNvbG9ycy5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkQ29sb3IgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEluaXRpbGl6YXRpb25cbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTGlzdFsgaSBdLmluaXQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG4pOyIsIid1c2Ugc3RyaWN0JztcbmRlZmluZSggJ2FwcC9jbGlja21lbW9kdWxlJywgW1xuICAgICAgICAnanF1ZXJ5JyxcbiAgICAgICAgJ2FwcC9oZWxwZXJzJ1xuICAgIF0sIGZ1bmN0aW9uICggJCwgSGVscGVycyApIHtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCAkZWxlbWVudCwgY3NzQ2xhc3MgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ0hlbGxvIENsaWNrTWVNb2R1bGUnICk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgICAgICAgICB1aWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgJGVsOiBudWxsLFxuICAgICAgICAgICAgICAgICRib3g6IG51bGwsXG4gICAgICAgICAgICAgICAgJGJ1dHRvbjogbnVsbCxcblxuICAgICAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdDbGlja01lTW9kdWxlLmluaXQnICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWlkID0gSGVscGVycy5ndWlkKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsID0gJGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGJveCA9IHRoaXMuJGVsLmZpbmQoICcubW9kLXJqcy1ib3gnICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGJveC5hZGRDbGFzcyggY3NzQ2xhc3MgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZGF0YSggJ3VpZCcsIHRoaXMudWlkICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoICcuanMtbW9kdWxlLXRpdGxlJyApLmh0bWwoICdNb2R1bGUgJyArIHRoaXMudWlkICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGJ1dHRvbiA9IHRoaXMuJGVsLmZpbmQoICcuanMtYnV0dG9uJyApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZXRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdDbGlja01lTW9kdWxlLnNldExpc3RlbmVycycgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kYnV0dG9uLm9uKCAnY2xpY2snLCB0aGlzLm9uQnV0dG9uQ2xpY2suYmluZCggdGhpcyApICk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIG9uQnV0dG9uQ2xpY2s6IGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdDbGlja01lTW9kdWxlLm9uQnV0dG9uQ2xpY2sgOiAnLCB0aGlzLnVpZCApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRidXR0b24uYnV0dG9uKCAnbG9hZGluZycgKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLnRvZ2dsZUNsYXNzKCAnYWN0aXZlJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9ICh0aGlzLiRidXR0b24uYXR0ciggXCJhcmlhLXByZXNzZWRcIiApID09PSAndHJ1ZScgPyAndW5jbGljaycgOiAnY2xpY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggdGhpcy4kYnV0dG9uLmF0dHIoIFwiYXJpYS1wcmVzc2VkXCIgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBzdGF0ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGJ1dHRvbi5idXR0b24oIHN0YXRlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy4kYnV0dG9uLmJ1dHRvbiggJ3Jlc2V0JyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQoIHRoaXMgKSwgSGVscGVycy5nZXRSYW5kb21JbnQoIDAsIDE1MDAgKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9O1xuXG4gICAgfVxuKTsiLCIndXNlIHN0cmljdCc7XG5kZWZpbmUoICdhcHAvaGVscGVycycsIFtcbiAgICAgICAgJ2pxdWVyeSdcbiAgICBdLCBmdW5jdGlvbiAoICQgKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICAgICAgZ3VpZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCAoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCApXG4gICAgICAgICAgICAgICAgICAgIC50b1N0cmluZyggMTYgKVxuICAgICAgICAgICAgICAgICAgICAuc3Vic3RyaW5nKCAxICk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybiBhIHJhbmRvbSB2YWx1ZSBiZXR3ZWVuIGEgbWluIHZhbHVlIGluY2x1c2l2ZSBhbmQgYSBtYXggdmFsdWUgZXhjbHVzaXZlXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWluXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWF4XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0UmFuZG9tSW50OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbCggbWluICk7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vciggbWF4ICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSApICsgbWluO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbik7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
