!function(n,e){"function"==typeof define&&define.amd?define(["MyModule_amd","App_amd"],e):"object"==typeof exports?module.exports=e(require("MyModule_cjs"),require("App_cjs")):n.App=e(n.MyModule_glob,n.App_glob)}(this,function(n,e){"use strict";function e(){var n={uid:null,container:null,init:function(){this.uid=this.guid(),console.log("Hello App ["+this.uid+"]"),this.container=document.body.getElementsByClassName("js-jumbotron-container")[0],this.container.innerHTML="<p>"+this.container.innerHTML+"Hello UMD APP ["+this.uid+"] </p>"},sayHello:function(){console.log("App.sayHello ["+this.uid+"]"),this.container.innerHTML="<p>"+this.container.innerHTML+"App.sayHello</p>"},createModules:function(){console.log("App.createModules"),this.container.innerHTML="<p>"+this.container.innerHTML+"App.createModule</p>";var n=new window.MyModule;n.init();var e=new window.MyModule;e.init(),n.sayHello(),e.sayHello()},guid:function(){return this.s4()+this.s4()+"-"+this.s4()+"-"+this.s4()},s4:function(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}};return n.init(),n}return e});
!function(i,t){"function"==typeof define&&define.amd?define(["MyModule_amd","App_amd"],t):"object"==typeof exports?module.exports=t(require("MyModule_cjs"),require("App_cjs")):i.MyModule=t(i.MyModule_glob,i.App_glob)}(this,function(i,t){"use strict";function i(){this.uid=null,this.container=null,this.init=function(){this.uid=this.guid(),console.log("Hello MyModule ["+this.uid+"]"),this.container=document.body.getElementsByClassName("js-jumbotron-container")[0],this.container.innerHTML="<p>"+this.container.innerHTML+"Hello Module ["+this.uid+"] </p>"},this.sayHello=function(){console.log("MyModule.sayHello ["+this.uid+"]"),this.container.innerHTML="<p>"+this.container.innerHTML+"Module.sayHello ["+this.uid+"] </p>"},this.guid=function(){return this.s4()+this.s4()+"-"+this.s4()+"-"+this.s4()},this.s4=function(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}}return i});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIm15TW9kdWxlLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJBcHAiLCJNeU1vZHVsZV9nbG9iIiwiQXBwX2dsb2IiLCJ0aGlzIiwiTXlNb2R1bGUiLCJ1aWQiLCJjb250YWluZXIiLCJpbml0IiwiZ3VpZCIsImNvbnNvbGUiLCJsb2ciLCJkb2N1bWVudCIsImJvZHkiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaW5uZXJIVE1MIiwic2F5SGVsbG8iLCJjcmVhdGVNb2R1bGVzIiwibW9kdWxlMSIsIndpbmRvdyIsIm1vZHVsZTIiLCJzNCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIl0sIm1hcHBpbmdzIjoiQ0FBRSxTQUFTQSxFQUFNQyxHQUNPLGtCQUFYQyxTQUF5QkEsT0FBT0MsSUFDekNELFFBQVEsZUFBZ0IsV0FBWUQsR0FDUixnQkFBWkcsU0FDaEJDLE9BQU9ELFFBQVVILEVBQVFLLFFBQVEsZ0JBQWlCQSxRQUFRLFlBRTFETixFQUFLTyxJQUFNTixFQUFRRCxFQUFLUSxjQUFlUixFQUFLUyxXQUU5Q0MsS0FBTSxTQUFTQyxFQUFVSixHQUMzQixZQU1BLFNBQVNBLEtBRUwsR0FBSUEsSUFFQUssSUFBSyxLQUNMQyxVQUFXLEtBRVhDLEtBQU0sV0FDRkosS0FBS0UsSUFBTUYsS0FBS0ssT0FDaEJDLFFBQVFDLElBQUssY0FBZ0JQLEtBQUtFLElBQU0sS0FDeENGLEtBQUtHLFVBQVlLLFNBQVNDLEtBQUtDLHVCQUF3QiwwQkFBNEIsR0FDbkZWLEtBQUtHLFVBQVVRLFVBQVksTUFBUVgsS0FBS0csVUFBVVEsVUFBWSxrQkFBb0JYLEtBQUtFLElBQU0sVUFJakdVLFNBQVUsV0FDTk4sUUFBUUMsSUFBSyxpQkFBbUJQLEtBQUtFLElBQU0sS0FDM0NGLEtBQUtHLFVBQVVRLFVBQVksTUFBUVgsS0FBS0csVUFBVVEsVUFBWSxvQkFHbEVFLGNBQWUsV0FDWFAsUUFBUUMsSUFBSyxxQkFDYlAsS0FBS0csVUFBVVEsVUFBWSxNQUFRWCxLQUFLRyxVQUFVUSxVQUFZLHNCQUU5RCxJQUFJRyxHQUFVLEdBQUlDLFFBQU9kLFFBQ3pCYSxHQUFRVixNQUVSLElBQUlZLEdBQVUsR0FBSUQsUUFBT2QsUUFDekJlLEdBQVFaLE9BRVJVLEVBQVFGLFdBQ1JJLEVBQVFKLFlBR1pQLEtBQU0sV0FDRixNQUFPTCxNQUFLaUIsS0FBT2pCLEtBQUtpQixLQUFPLElBQU1qQixLQUFLaUIsS0FBTyxJQUFNakIsS0FBS2lCLE1BR2hFQSxHQUFJLFdBQ0EsTUFBT0MsTUFBS0MsTUFBNkIsT0FBckIsRUFBSUQsS0FBS0UsV0FDeEJDLFNBQVUsSUFDVkMsVUFBVyxJQUl4QixPQURBekIsR0FBSU8sT0FDR1AsRUFJWCxNQUFPQTtDQ2hFTCxTQUFTUCxFQUFNQyxHQUNPLGtCQUFYQyxTQUF5QkEsT0FBT0MsSUFDekNELFFBQVEsZUFBZ0IsV0FBWUQsR0FDUixnQkFBWkcsU0FDaEJDLE9BQU9ELFFBQVVILEVBQVFLLFFBQVEsZ0JBQWlCQSxRQUFRLFlBRTFETixFQUFLVyxTQUFXVixFQUFRRCxFQUFLUSxjQUFlUixFQUFLUyxXQUVuREMsS0FBTSxTQUFTQyxFQUFVSixHQUMzQixZQUNBLFNBQVNJLEtBRUxELEtBQUtFLElBQU0sS0FFWEYsS0FBS0csVUFBWSxLQUVqQkgsS0FBS0ksS0FBTyxXQUNSSixLQUFLRSxJQUFNRixLQUFLSyxPQUNoQkMsUUFBUUMsSUFBSyxtQkFBcUJQLEtBQUtFLElBQU0sS0FDN0NGLEtBQUtHLFVBQVlLLFNBQVNDLEtBQUtDLHVCQUF3QiwwQkFBNEIsR0FDbkZWLEtBQUtHLFVBQVVRLFVBQVksTUFBUVgsS0FBS0csVUFBVVEsVUFBWSxpQkFBbUJYLEtBQUtFLElBQU0sVUFJaEdGLEtBQUtZLFNBQVcsV0FDWk4sUUFBUUMsSUFBSyxzQkFBd0JQLEtBQUtFLElBQU0sS0FDaERGLEtBQUtHLFVBQVVRLFVBQVksTUFBUVgsS0FBS0csVUFBVVEsVUFBWSxvQkFBc0JYLEtBQUtFLElBQU0sVUFHbkdGLEtBQUtLLEtBQU8sV0FDUixNQUFPTCxNQUFLaUIsS0FBT2pCLEtBQUtpQixLQUFPLElBQU1qQixLQUFLaUIsS0FBTyxJQUFNakIsS0FBS2lCLE1BR2hFakIsS0FBS2lCLEdBQUssV0FDTixNQUFPQyxNQUFLQyxNQUE2QixPQUFyQixFQUFJRCxLQUFLRSxXQUN4QkMsU0FBVSxJQUNWQyxVQUFXLElBTXhCLE1BQU9yQiIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnTXlNb2R1bGVfYW1kJywgJ0FwcF9hbWQnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ015TW9kdWxlX2NqcycpLCByZXF1aXJlKCdBcHBfY2pzJykpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuQXBwID0gZmFjdG9yeShyb290Lk15TW9kdWxlX2dsb2IsIHJvb3QuQXBwX2dsb2IpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uKE15TW9kdWxlLCBBcHApIHtcbid1c2Ugc3RyaWN0JztcclxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKlxyXG4gKiBNT0RVTEUgRVhBTVBMRVxyXG4gKlxyXG4gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZnVuY3Rpb24gQXBwKCkge1xyXG5cclxuICAgIHZhciBBcHAgPSB7XHJcblxyXG4gICAgICAgIHVpZDogbnVsbCxcclxuICAgICAgICBjb250YWluZXI6IG51bGwsXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy51aWQgPSB0aGlzLmd1aWQoKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coICdIZWxsbyBBcHAgWycgKyB0aGlzLnVpZCArICddJyApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggJ2pzLWp1bWJvdHJvbi1jb250YWluZXInIClbIDAgXTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJzxwPicgKyB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgKyAnSGVsbG8gVU1EIEFQUCBbJyArIHRoaXMudWlkICsgJ10gPC9wPic7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNheUhlbGxvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnQXBwLnNheUhlbGxvIFsnICsgdGhpcy51aWQgKyAnXScgKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJzxwPicgKyB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgKyAnQXBwLnNheUhlbGxvPC9wPic7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY3JlYXRlTW9kdWxlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ0FwcC5jcmVhdGVNb2R1bGVzJyApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnPHA+JyArIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCArICdBcHAuY3JlYXRlTW9kdWxlPC9wPic7XHJcblxyXG4gICAgICAgICAgICB2YXIgbW9kdWxlMSA9IG5ldyB3aW5kb3cuTXlNb2R1bGUoKTtcclxuICAgICAgICAgICAgbW9kdWxlMS5pbml0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbW9kdWxlMiA9IG5ldyB3aW5kb3cuTXlNb2R1bGUoKTtcclxuICAgICAgICAgICAgbW9kdWxlMi5pbml0KCk7XHJcblxyXG4gICAgICAgICAgICBtb2R1bGUxLnNheUhlbGxvKCk7XHJcbiAgICAgICAgICAgIG1vZHVsZTIuc2F5SGVsbG8oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBndWlkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnM0KCkgKyB0aGlzLnM0KCkgKyAnLScgKyB0aGlzLnM0KCkgKyAnLScgKyB0aGlzLnM0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgczQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoICgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwIClcclxuICAgICAgICAgICAgICAgIC50b1N0cmluZyggMTYgKVxyXG4gICAgICAgICAgICAgICAgLnN1YnN0cmluZyggMSApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcHAuaW5pdCgpO1xyXG4gICAgcmV0dXJuIEFwcDtcclxufTtcclxuXHJcblxucmV0dXJuIEFwcDtcbn0pKTtcbiIsIjsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnTXlNb2R1bGVfYW1kJywgJ0FwcF9hbWQnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ015TW9kdWxlX2NqcycpLCByZXF1aXJlKCdBcHBfY2pzJykpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuTXlNb2R1bGUgPSBmYWN0b3J5KHJvb3QuTXlNb2R1bGVfZ2xvYiwgcm9vdC5BcHBfZ2xvYik7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24oTXlNb2R1bGUsIEFwcCkge1xuJ3VzZSBzdHJpY3QnO1xyXG5mdW5jdGlvbiBNeU1vZHVsZSgpIHtcclxuXHJcbiAgICB0aGlzLnVpZCA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnVpZCA9IHRoaXMuZ3VpZCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCAnSGVsbG8gTXlNb2R1bGUgWycgKyB0aGlzLnVpZCArICddJyApO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuYm9keS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCAnanMtanVtYm90cm9uLWNvbnRhaW5lcicgKVsgMCBdO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICc8cD4nICsgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MICsgJ0hlbGxvIE1vZHVsZSBbJyArIHRoaXMudWlkICsgJ10gPC9wPic7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNheUhlbGxvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCAnTXlNb2R1bGUuc2F5SGVsbG8gWycgKyB0aGlzLnVpZCArICddJyApO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICc8cD4nICsgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MICsgJ01vZHVsZS5zYXlIZWxsbyBbJyArIHRoaXMudWlkICsgJ10gPC9wPic7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ3VpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zNCgpICsgdGhpcy5zNCgpICsgJy0nICsgdGhpcy5zNCgpICsgJy0nICsgdGhpcy5zNCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnM0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCAoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCApXHJcbiAgICAgICAgICAgIC50b1N0cmluZyggMTYgKVxyXG4gICAgICAgICAgICAuc3Vic3RyaW5nKCAxICk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuXG5yZXR1cm4gTXlNb2R1bGU7XG59KSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
