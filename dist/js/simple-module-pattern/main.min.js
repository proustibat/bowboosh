"use strict";var MyApp=window.MyApp||function(t,e){var n={_config:{information:{version:"1.0.0",author:"Jennifer Proust"},message:"Hello JS APP !"},sayMessage:function(t){t instanceof Event&&(t.preventDefault(),t=null),console.log("__private.sayMessage : ",t),s.title.innerHTML=t||this._config.message},sayAuthor:function(t){console.log("__private.sayAuthor"),t.preventDefault(),n.sayMessage("Author: "+this._config.information.author)},sayVersion:function(t){console.log("__private.sayVersion"),t.preventDefault(),n.sayMessage("Version: "+this._config.information.version)}},s={init:function(){console.log("application.init"),this._cache(),this._bind(),n.sayMessage()},_cache:function(){console.log("application._cache"),this.body=t.body,this.title=this.body.getElementsByTagName("h1")[0],this.buttonAuthor=this.body.getElementsByClassName("js-btn-author")[0],this.buttonVersion=this.body.getElementsByClassName("js-btn-version")[0],this.buttonReset=this.body.getElementsByClassName("js-btn-reset")[0]},_bind:function(){console.log("application._bind"),this.buttonAuthor.addEventListener("click",n.sayAuthor.bind(n),!1),this.buttonVersion.addEventListener("click",n.sayVersion.bind(n),!1),this.buttonReset.addEventListener("click",n.sayMessage.bind(n),!1)}};return s}(document,window);MyApp.init();
"use strict";var MODULE=window.MODULE||function(o,n,e){function t(){console.log("Module :: Private method 1")}function i(){console.log("Module :: Private method 2")}return{init:function(){console.log("Hello Module",this),t(),i()},publicMethod:function(){console.log("Module :: publicMethod")}}}(document,window);MODULE.init(),MODULE.publicMethod();
//# sourceMappingURL=data:application/json;base64,
