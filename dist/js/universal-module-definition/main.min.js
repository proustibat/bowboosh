/**
 * bowboosh - Simple boilerplate with gulp, bower, bootstrap sass, font-awesome, bootswatch themes
 * @version v1.0.0
 * @link https://github.com/proustibat/bowboosh
 * @license MIT
 */
;(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['MyModule_amd', 'App_amd'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('MyModule_cjs'), require('App_cjs'));
  } else {
    root.App = factory(root.MyModule_glob, root.App_glob);
  }
}(this, function(MyModule, App) {
'use strict';
/**
 * App
 * @returns {{uid: null, container: null, init: App.init, sayHello: App.sayHello, createModules: App.createModules, guid: App.guid, s4: App.s4}}
 * @constructor
 */
function App() {
    /**
     *
     * @type {{uid: null, container: null, init: App.init, sayHello: App.sayHello, createModules: App.createModules, guid: App.guid, s4: App.s4}}
     */
    var App = {

        uid: null,
        container: null,
        /**
         * Init
         */
        init: function () {
            this.uid = this.guid();
            console.log( 'Hello App [' + this.uid + ']' );
            this.container = document.body.getElementsByClassName( 'js-jumbotron-container' )[ 0 ];
            this.container.innerHTML = '<p>' + this.container.innerHTML + 'Hello UMD APP [' + this.uid + '] </p>';

        },
        /**
         * sayHello
         */
        sayHello: function () {
            console.log( 'App.sayHello [' + this.uid + ']' );
            this.container.innerHTML = '<p>' + this.container.innerHTML + 'App.sayHello</p>';
        },
        /**
         * createModule
         */
        createModules: function () {
            console.log( 'App.createModules' );
            this.container.innerHTML = '<p>' + this.container.innerHTML + 'App.createModule</p>';

            var module1 = new window.MyModule();
            module1.init();

            var module2 = new window.MyModule();
            module2.init();

            module1.sayHello();
            module2.sayHello();
        },
        /**
         * guid
         * @returns {string}
         */
        guid: function () {
            return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4();
        },
        /**
         * s4
         * @returns {string}
         */
        s4: function () {
            return Math.floor( (1 + Math.random()) * 0x10000 )
                .toString( 16 )
                .substring( 1 );
        }
    };
    
    App.init();
    return App;
}

return App;
}));

;(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['MyModule_amd', 'App_amd'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('MyModule_cjs'), require('App_cjs'));
  } else {
    root.MyModule = factory(root.MyModule_glob, root.App_glob);
  }
}(this, function(MyModule, App) {
'use strict';
/**
 * MyModule
 * @constructor
 */
function MyModule() {

    this.uid = null;
    this.container = null;

    /**
     * init
     */
    this.init = function () {
        this.uid = this.guid();
        console.log( 'Hello MyModule [' + this.uid + ']' );
        this.container = document.body.getElementsByClassName( 'js-jumbotron-container' )[ 0 ];
        this.container.innerHTML = '<p>' + this.container.innerHTML + 'Hello Module [' + this.uid + '] </p>';

    };

    /**
     * sayHello
     */
    this.sayHello = function () {
        console.log( 'MyModule.sayHello [' + this.uid + ']' );
        this.container.innerHTML = '<p>' + this.container.innerHTML + 'Module.sayHello [' + this.uid + '] </p>';
    };

    /**
     * guid
     * @returns {string}
     */
    this.guid = function () {
        return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4();
    };

    /**
     * s4
     * @returns {string}
     */
    this.s4 = function () {
        return Math.floor( (1 + Math.random()) * 0x10000 )
            .toString( 16 )
            .substring( 1 );
    };
}



return MyModule;
}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC5qcyIsIm15TW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKipcbiAqIEFwcFxuICogQHJldHVybnMge3t1aWQ6IG51bGwsIGNvbnRhaW5lcjogbnVsbCwgaW5pdDogQXBwLmluaXQsIHNheUhlbGxvOiBBcHAuc2F5SGVsbG8sIGNyZWF0ZU1vZHVsZXM6IEFwcC5jcmVhdGVNb2R1bGVzLCBndWlkOiBBcHAuZ3VpZCwgczQ6IEFwcC5zNH19XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXBwKCkge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHR5cGUge3t1aWQ6IG51bGwsIGNvbnRhaW5lcjogbnVsbCwgaW5pdDogQXBwLmluaXQsIHNheUhlbGxvOiBBcHAuc2F5SGVsbG8sIGNyZWF0ZU1vZHVsZXM6IEFwcC5jcmVhdGVNb2R1bGVzLCBndWlkOiBBcHAuZ3VpZCwgczQ6IEFwcC5zNH19XG4gICAgICovXG4gICAgdmFyIEFwcCA9IHtcblxuICAgICAgICB1aWQ6IG51bGwsXG4gICAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRcbiAgICAgICAgICovXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudWlkID0gdGhpcy5ndWlkKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ0hlbGxvIEFwcCBbJyArIHRoaXMudWlkICsgJ10nICk7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggJ2pzLWp1bWJvdHJvbi1jb250YWluZXInIClbIDAgXTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICc8cD4nICsgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MICsgJ0hlbGxvIFVNRCBBUFAgWycgKyB0aGlzLnVpZCArICddIDwvcD4nO1xuXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzYXlIZWxsb1xuICAgICAgICAgKi9cbiAgICAgICAgc2F5SGVsbG86IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnQXBwLnNheUhlbGxvIFsnICsgdGhpcy51aWQgKyAnXScgKTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICc8cD4nICsgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MICsgJ0FwcC5zYXlIZWxsbzwvcD4nO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogY3JlYXRlTW9kdWxlXG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVNb2R1bGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ0FwcC5jcmVhdGVNb2R1bGVzJyApO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJzxwPicgKyB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgKyAnQXBwLmNyZWF0ZU1vZHVsZTwvcD4nO1xuXG4gICAgICAgICAgICB2YXIgbW9kdWxlMSA9IG5ldyB3aW5kb3cuTXlNb2R1bGUoKTtcbiAgICAgICAgICAgIG1vZHVsZTEuaW5pdCgpO1xuXG4gICAgICAgICAgICB2YXIgbW9kdWxlMiA9IG5ldyB3aW5kb3cuTXlNb2R1bGUoKTtcbiAgICAgICAgICAgIG1vZHVsZTIuaW5pdCgpO1xuXG4gICAgICAgICAgICBtb2R1bGUxLnNheUhlbGxvKCk7XG4gICAgICAgICAgICBtb2R1bGUyLnNheUhlbGxvKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBndWlkXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBndWlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zNCgpICsgdGhpcy5zNCgpICsgJy0nICsgdGhpcy5zNCgpICsgJy0nICsgdGhpcy5zNCgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogczRcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHM0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vciggKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDAgKVxuICAgICAgICAgICAgICAgIC50b1N0cmluZyggMTYgKVxuICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoIDEgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgQXBwLmluaXQoKTtcbiAgICByZXR1cm4gQXBwO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBNeU1vZHVsZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE15TW9kdWxlKCkge1xuXG4gICAgdGhpcy51aWQgPSBudWxsO1xuICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIGluaXRcbiAgICAgKi9cbiAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudWlkID0gdGhpcy5ndWlkKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCAnSGVsbG8gTXlNb2R1bGUgWycgKyB0aGlzLnVpZCArICddJyApO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggJ2pzLWp1bWJvdHJvbi1jb250YWluZXInIClbIDAgXTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJzxwPicgKyB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgKyAnSGVsbG8gTW9kdWxlIFsnICsgdGhpcy51aWQgKyAnXSA8L3A+JztcblxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBzYXlIZWxsb1xuICAgICAqL1xuICAgIHRoaXMuc2F5SGVsbG8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCAnTXlNb2R1bGUuc2F5SGVsbG8gWycgKyB0aGlzLnVpZCArICddJyApO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnPHA+JyArIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCArICdNb2R1bGUuc2F5SGVsbG8gWycgKyB0aGlzLnVpZCArICddIDwvcD4nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBndWlkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmd1aWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnM0KCkgKyB0aGlzLnM0KCkgKyAnLScgKyB0aGlzLnM0KCkgKyAnLScgKyB0aGlzLnM0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIHM0XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnM0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vciggKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDAgKVxuICAgICAgICAgICAgLnRvU3RyaW5nKCAxNiApXG4gICAgICAgICAgICAuc3Vic3RyaW5nKCAxICk7XG4gICAgfTtcbn1cblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
